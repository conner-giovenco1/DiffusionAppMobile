{"version":3,"names":["React","useEffect","NativeModules","Platform","DeviceEventEmitter","StyleSheet","RNGoogleSigninButton","RNGoogleSignin","GoogleSigninButton","onPress","style","rest","OS","clickListener","addListener","remove","recommendedSize","size","BUTTON_SIZE_ICON","styles","iconSize","BUTTON_SIZE_WIDE","wideSize","standardSize","Size","Icon","Standard","BUTTON_SIZE_STANDARD","Wide","Color","Dark","BUTTON_COLOR_DARK","Light","BUTTON_COLOR_LIGHT","create","width","height"],"sources":["GoogleSigninButton.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\nimport { NativeModules, Platform, DeviceEventEmitter, StyleSheet } from 'react-native';\nimport { RNGoogleSigninButton } from './RNGoogleSiginButton';\nimport type { GoogleSigninButtonProps } from './types';\n\ninterface RNGoogleSignStaticsType {\n  BUTTON_SIZE_STANDARD: number;\n  BUTTON_SIZE_WIDE: number;\n  BUTTON_SIZE_ICON: number;\n  BUTTON_COLOR_DARK: number;\n  BUTTON_COLOR_LIGHT: number;\n}\nconst RNGoogleSignin: RNGoogleSignStaticsType = NativeModules.RNGoogleSignin;\n\nexport const GoogleSigninButton = ({ onPress, style, ...rest }: GoogleSigninButtonProps) => {\n  useEffect(() => {\n    if (Platform.OS === 'ios') {\n      return;\n    }\n    const clickListener = DeviceEventEmitter.addListener('RNGoogleSigninButtonClicked', () => {\n      onPress?.();\n    });\n    return () => {\n      clickListener.remove();\n    };\n  }, [onPress]);\n\n  const recommendedSize = (() => {\n    switch (rest.size) {\n      case RNGoogleSignin.BUTTON_SIZE_ICON:\n        return styles.iconSize;\n      case RNGoogleSignin.BUTTON_SIZE_WIDE:\n        return styles.wideSize;\n      default:\n        return styles.standardSize;\n    }\n  })();\n\n  // @ts-ignore style prop incompatible\n  return <RNGoogleSigninButton {...rest} onPress={onPress} style={[recommendedSize, style]} />;\n};\n\nGoogleSigninButton.Size = {\n  Icon: RNGoogleSignin.BUTTON_SIZE_ICON,\n  Standard: RNGoogleSignin.BUTTON_SIZE_STANDARD,\n  Wide: RNGoogleSignin.BUTTON_SIZE_WIDE,\n};\n\nGoogleSigninButton.Color = {\n  Dark: RNGoogleSignin.BUTTON_COLOR_DARK,\n  Light: RNGoogleSignin.BUTTON_COLOR_LIGHT,\n};\n\n// sizes according to https://developers.google.com/identity/sign-in/ios/reference/Classes/GIDSignInButton\nconst styles = StyleSheet.create({\n  iconSize: {\n    width: 48,\n    height: 48,\n  },\n  standardSize: { width: 230, height: 48 },\n  wideSize: { width: 312, height: 48 },\n});\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,SAASC,aAAa,EAAEC,QAAQ,EAAEC,kBAAkB,EAAEC,UAAU,QAAQ,cAAc;AACtF,SAASC,oBAAoB,QAAQ,uBAAuB;AAU5D,MAAMC,cAAuC,GAAGL,aAAa,CAACK,cAAc;AAE5E,OAAO,MAAMC,kBAAkB,GAAG,QAA0D;EAAA,IAAzD;IAAEC,OAAO;IAAEC,KAAK;IAAE,GAAGC;EAA8B,CAAC;EACrFV,SAAS,CAAC,MAAM;IACd,IAAIE,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;MACzB;IACF;IACA,MAAMC,aAAa,GAAGT,kBAAkB,CAACU,WAAW,CAAC,6BAA6B,EAAE,MAAM;MACxFL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,EAAI;IACb,CAAC,CAAC;IACF,OAAO,MAAM;MACXI,aAAa,CAACE,MAAM,EAAE;IACxB,CAAC;EACH,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;EAEb,MAAMO,eAAe,GAAG,CAAC,MAAM;IAC7B,QAAQL,IAAI,CAACM,IAAI;MACf,KAAKV,cAAc,CAACW,gBAAgB;QAClC,OAAOC,MAAM,CAACC,QAAQ;MACxB,KAAKb,cAAc,CAACc,gBAAgB;QAClC,OAAOF,MAAM,CAACG,QAAQ;MACxB;QACE,OAAOH,MAAM,CAACI,YAAY;IAAC;EAEjC,CAAC,GAAG;;EAEJ;EACA,oBAAO,oBAAC,oBAAoB,eAAKZ,IAAI;IAAE,OAAO,EAAEF,OAAQ;IAAC,KAAK,EAAE,CAACO,eAAe,EAAEN,KAAK;EAAE,GAAG;AAC9F,CAAC;AAEDF,kBAAkB,CAACgB,IAAI,GAAG;EACxBC,IAAI,EAAElB,cAAc,CAACW,gBAAgB;EACrCQ,QAAQ,EAAEnB,cAAc,CAACoB,oBAAoB;EAC7CC,IAAI,EAAErB,cAAc,CAACc;AACvB,CAAC;AAEDb,kBAAkB,CAACqB,KAAK,GAAG;EACzBC,IAAI,EAAEvB,cAAc,CAACwB,iBAAiB;EACtCC,KAAK,EAAEzB,cAAc,CAAC0B;AACxB,CAAC;;AAED;AACA,MAAMd,MAAM,GAAGd,UAAU,CAAC6B,MAAM,CAAC;EAC/Bd,QAAQ,EAAE;IACRe,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE;EACV,CAAC;EACDb,YAAY,EAAE;IAAEY,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAG,CAAC;EACxCd,QAAQ,EAAE;IAAEa,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAG;AACrC,CAAC,CAAC"}